REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.3s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
Running build.sh script inside the container...
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.8s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.5s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.8s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Container esp32_builder  Running
Running build.sh script inside the container...
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.4s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.8s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.4s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware_ci
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Creating ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Error: No valid branch, tag, or commit provided.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware_ci
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.4s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
time="2024-09-16T16:14:01+02:00" level=warning msg="The \"ESP_PROJECT_DIR\" variable is not set. Defaulting to a blank string."
1 error(s) decoding:

* error decoding 'volumes[2]': invalid spec: :/usr/local/build: empty section between colons
Running build.sh script inside the container...
Error response from daemon: No such container: esp32_builder
Stopping and removing the Docker container...
time="2024-09-16T16:14:11+02:00" level=warning msg="The \"ESP_PROJECT_DIR\" variable is not set. Defaulting to a blank string."
1 error(s) decoding:

* error decoding 'volumes[2]': invalid spec: :/usr/local/build: empty section between colons
Returning to the original directory: /home/bartek/workspace
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
parsing /home/bartek/workspace/lora_esp32_firmware_ci/docker-compose.yml: invalid interpolation format for services.esp32_build.volumes.[].
You may need to escape any $ with another $.
${ESP_PROJECT_DIR:}:/usr/local/build
Running build.sh script inside the container...
Error response from daemon: No such container: esp32_builder
Stopping and removing the Docker container...
parsing /home/bartek/workspace/lora_esp32_firmware_ci/docker-compose.yml: invalid interpolation format for services.esp32_build.volumes.[].
You may need to escape any $ with another $.
${ESP_PROJECT_DIR:}:/usr/local/build
Returning to the original directory: /home/bartek/workspace
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
1 error(s) decoding:

* error decoding 'volumes[2]': invalid spec: :/usr/local/build: empty section between colons
Running build.sh script inside the container...
Error response from daemon: No such container: esp32_builder
Stopping and removing the Docker container...
1 error(s) decoding:

* error decoding 'volumes[2]': invalid spec: :/usr/local/build: empty section between colons
Returning to the original directory: /home/bartek/workspace
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.3s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DIDF_TARGET=esp32 -DCCACHE_ENABLE=1 /usr/local/build"...
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.3s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Error: No valid branch, tag, or commit provided.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#5 CACHED

#6 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Launching menuconfig for ESP-IDF project at: /home/bartek/workspace/lora_esp32_firmware
Please use idf.py only in an ESP-IDF shell environment.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 2.0s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Launching menuconfig for ESP-IDF project at: /home/bartek/workspace/lora_esp32_firmware
Please use idf.py only in an ESP-IDF shell environment.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.8s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Launching menuconfig for ESP-IDF project at: /home/bartek/workspace/lora_esp32_firmware
Please use idf.py only in an ESP-IDF shell environment.
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.6s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Launching menuconfig for ESP-IDF project at: /home/bartek/workspace/lora_esp32_firmware
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Launching menuconfig for ESP-IDF project at: /home/bartek/workspace/lora_esp32_firmware
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Container esp32_builder  Running
Launching menuconfig for ESP-IDF project at: /home/bartek/workspace/lora_esp32_firmware
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.6s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
TAG: 0.0.1
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Checking out tag '0.0.1'...
Uwaga: przełączanie na „tags/0.0.1”.

Jesteś w stanie „odłączonego HEAD”. Możesz się rozglądać, tworzyć
eksperymentalne zmiany i je składać, i możesz odrzucić wszystkie zapisy,
które złożysz w tym stanie, bez wpływu na żadną gałąź, przełączając z powrotem na jakąś gałąź.

Jeśli chcesz utworzyć nową gałąź, która zachowa zapisy, które złożysz,
możesz to zrobić (teraz lub później) używając -c w ponownym poleceniu przełączenia.
Przykład:

  git switch -c <nazwa-nowej-gałęzi>

Lub cofnąć tę operację przez:

  git switch -

Wyłącz tę poradę ustawiając zmienną konfiguracji advice.detachedHead na false

HEAD wskazuje teraz na e0fd7b6 Merge pull request #31 from BuzzVerse/fix/BeeMonitor#26
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load .dockerignore
#1 transferring context: 2B done
#1 DONE 0.0s

#2 [esp32_build internal] load build definition from Dockerfile
#2 transferring dockerfile: 946B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.5s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
fatal: Nie znaleziono adresu dla ścieżki podmodułu „artifacts/build” w .gitmodules
Error: Failed to clone the repository from https://github.com/BuzzVerse/lora_esp32_firmware.git.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_183 and /usr/local/build/build/log/idf_py_stdout_output_183
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
fatal: Nie znaleziono adresu dla ścieżki podmodułu „artifacts/build” w .gitmodules
Error: Failed to clone the repository from https://github.com/BuzzVerse/lora_esp32_firmware.git.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 0.7s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
CMake Error at /opt/esp/idf/tools/cmake/component.cmake:312 (message):
  Include directory
  '/usr/local/build/components/lora/include/protocols/packet' is not a
  directory.
Call Stack (most recent call first):
  /opt/esp/idf/tools/cmake/component.cmake:486 (__component_add_include_dirs)
  components/lora/CMakeLists.txt:3 (idf_component_register)


-- Configuring incomplete, errors occurred!
See also "/usr/local/build/build/CMakeFiles/CMakeOutput.log".
cmake failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_182 and /usr/local/build/build/log/idf_py_stdout_output_182
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
REPO_URL: https://github.com/BuzzVerse/lora_esp32_firmware.git
TARGET_DIR: ./tmp
BRANCH: main
Setting ownership of ./tmp to the host user...
Cleaning the existing ./tmp directory...
Cloning repository from https://github.com/BuzzVerse/lora_esp32_firmware.git to ./tmp...
Klonowanie do „./tmp”...
Zarejestrowano podmoduł „driver” (git@github.com:BuzzVerse/lora_driver.git) w „components/lora/include/driver”
Zarejestrowano podmoduł „protocols” (git@github.com:BuzzVerse/protocols.git) w „components/lora/include/protocols”
Klonowanie do „/home/bartek/workspace/lora_esp32_firmware_ci/tmp/components/lora/include/driver”...
Klonowanie do „/home/bartek/workspace/lora_esp32_firmware_ci/tmp/components/lora/include/protocols”...
Ścieżka podmodułu „components/lora/include/driver”: wybrano „191422bac3ac30ed53414f71b069898e9315c064”
Ścieżka podmodułu „components/lora/include/protocols”: wybrano „f50bccbbe5ad814491f3e8d47d18063436099f53”
/home/bartek/workspace/lora_esp32_firmware_ci/scripts/fetch.sh: wiersz 67: cd: ./tmp: Nie ma takiego pliku ani katalogu
Checking out branch 'main'...
Już jesteś na „main”
Twoja gałąź jest na bieżąco z „origin/main”.
Repository fetched successfully into ./tmp.
Setting ownership of /home/bartek/workspace/lora_esp32_firmware_ci/artifacts to the host user...
Cleaning existing artifacts directory: /home/bartek/workspace/lora_esp32_firmware_ci/artifacts
Starting Docker container...
#0 building with "default" instance using docker driver

#1 [esp32_build internal] load build definition from Dockerfile
#1 transferring dockerfile: 946B done
#1 DONE 0.0s

#2 [esp32_build internal] load .dockerignore
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [esp32_build internal] load metadata for docker.io/espressif/idf:v5.0
#3 DONE 1.6s

#4 [esp32_build 1/4] FROM docker.io/espressif/idf:v5.0@sha256:e72dca3636c0b4d6d6c99f6baaec6681f2aac313830a84143eb892c408a4096d
#4 DONE 0.0s

#5 [esp32_build 2/4] RUN apt-get update && apt-get install -y     git     cmake     ninja-build     wget     python3-pip     bash     tzdata &&     ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime &&     dpkg-reconfigure --frontend noninteractive tzdata
#5 CACHED

#6 [esp32_build 3/4] RUN echo ". /opt/esp/idf/export.sh" >> ~/.bashrc
#6 CACHED

#7 [esp32_build 4/4] WORKDIR /workspace
#7 CACHED

#8 [esp32_build] exporting to image
#8 exporting layers done
#8 writing image sha256:edb92078ac9e20345486c04147f262c6ebf3f4d8d4eb35595c645fa2591da2bd done
#8 naming to docker.io/library/my-esp32-image:latest done
#8 DONE 0.0s
 Network lora_esp32_firmware_ci_default  Creating
 Network lora_esp32_firmware_ci_default  Created
 Container esp32_builder  Creating
 Container esp32_builder  Created
 Container esp32_builder  Starting
 Container esp32_builder  Started
Running build.sh script inside the container...
Detecting the Python interpreter
Checking "python3" ...
Python 3.8.10
"python3" has been detected
Checking Python compatibility
Checking other ESP-IDF version.
Adding ESP-IDF tools to PATH...
Using a supported version of tool cmake found in PATH: 3.16.3.
However the recommended version is 3.24.0.
Checking if Python packages are up to date...
Requirement files:
 - /opt/esp/idf/tools/requirements/requirements.core.txt
Python being checked: /opt/esp/python_env/idf5.0_py3.8_env/bin/python
Python requirements are satisfied.
Added the following directories to PATH:
  /opt/esp/idf/components/esptool_py/esptool
  /opt/esp/idf/components/espcoredump
  /opt/esp/idf/components/partition_table
  /opt/esp/idf/components/app_update
  /opt/esp/tools/xtensa-esp-elf-gdb/11.2_20220823/xtensa-esp-elf-gdb/bin
  /opt/esp/tools/riscv32-esp-elf-gdb/11.2_20220823/riscv32-esp-elf-gdb/bin
  /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin
  /opt/esp/tools/xtensa-esp32s2-elf/esp-2022r1-11.2.0/xtensa-esp32s2-elf/bin
  /opt/esp/tools/xtensa-esp32s3-elf/esp-2022r1-11.2.0/xtensa-esp32s3-elf/bin
  /opt/esp/tools/riscv32-esp-elf/esp-2022r1-11.2.0/riscv32-esp-elf/bin
  /opt/esp/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin
  /opt/esp/tools/openocd-esp32/v0.11.0-esp32-20221026/openocd-esp32/bin
  /opt/esp/python_env/idf5.0_py3.8_env/bin

Detected installed tools that are not currently used by active ESP-IDF version.
For removing cmake use command 'python /opt/esp/idf/tools/idf_tools.py uninstall'
To free up even more space, remove installation packages of those tools. Use option 'python3 /opt/esp/idf/tools/idf_tools.py uninstall --remove-archives'.

Done! You can now compile ESP-IDF projects.
Go to the project directory and run:

  idf.py build

Executing action: all (aliases: build)
Running cmake in directory /usr/local/build/build
Executing "cmake -G Ninja -DPYTHON_DEPS_CHECKED=1 -DESP_PLATFORM=1 -DCCACHE_ENABLE=1 /usr/local/build"...
-- IDF_TARGET not set, using default target: esp32
-- Found Git: /usr/bin/git (found version "2.25.1") 
-- ccache will be used for faster recompilation
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Project is not inside a git repository, or git repository has no commits; will not use 'git describe' to determine PROJECT_VER.
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Found Python3: /opt/esp/python_env/idf5.0_py3.8_env/bin/python (found version "3.8.10") found components: Interpreter 
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS
-- Performing Test C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS - Success
-- App "lora_esp32_firmware" version: 1
-- Adding linker script /usr/local/build/build/esp-idf/esp_system/ld/memory.ld
-- Adding linker script /opt/esp/idf/components/esp_system/ld/esp32/sections.ld.in
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-data.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.syscalls.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
-- Components: app_trace app_update bme280 bootloader bootloader_support bt cmock console cxx driver efuse esp-tls esp_adc esp_app_format esp_common esp_eth esp_event esp_gdbstub esp_hid esp_http_client esp_http_server esp_https_ota esp_https_server esp_hw_support esp_lcd esp_local_ctrl esp_netif esp_partition esp_phy esp_pm esp_psram esp_ringbuf esp_rom esp_system esp_timer esp_wifi espcoredump esptool_py fatfs freertos hal heap http_parser idf_test ieee802154 json log lora low_power_mode lwip main mbedtls mqtt newlib nvs_flash openthread partition_table perfmon protobuf-c protocol_examples_common protocomm pthread sdmmc soc spi_flash spiffs tcp_transport ulp unity usb vfs wear_levelling wifi_provisioning wpa_supplicant xtensa
-- Component paths: /opt/esp/idf/components/app_trace /opt/esp/idf/components/app_update /usr/local/build/components/bme280 /opt/esp/idf/components/bootloader /opt/esp/idf/components/bootloader_support /opt/esp/idf/components/bt /opt/esp/idf/components/cmock /opt/esp/idf/components/console /opt/esp/idf/components/cxx /opt/esp/idf/components/driver /opt/esp/idf/components/efuse /opt/esp/idf/components/esp-tls /opt/esp/idf/components/esp_adc /opt/esp/idf/components/esp_app_format /opt/esp/idf/components/esp_common /opt/esp/idf/components/esp_eth /opt/esp/idf/components/esp_event /opt/esp/idf/components/esp_gdbstub /opt/esp/idf/components/esp_hid /opt/esp/idf/components/esp_http_client /opt/esp/idf/components/esp_http_server /opt/esp/idf/components/esp_https_ota /opt/esp/idf/components/esp_https_server /opt/esp/idf/components/esp_hw_support /opt/esp/idf/components/esp_lcd /opt/esp/idf/components/esp_local_ctrl /opt/esp/idf/components/esp_netif /opt/esp/idf/components/esp_partition /opt/esp/idf/components/esp_phy /opt/esp/idf/components/esp_pm /opt/esp/idf/components/esp_psram /opt/esp/idf/components/esp_ringbuf /opt/esp/idf/components/esp_rom /opt/esp/idf/components/esp_system /opt/esp/idf/components/esp_timer /opt/esp/idf/components/esp_wifi /opt/esp/idf/components/espcoredump /opt/esp/idf/components/esptool_py /opt/esp/idf/components/fatfs /opt/esp/idf/components/freertos /opt/esp/idf/components/hal /opt/esp/idf/components/heap /opt/esp/idf/components/http_parser /opt/esp/idf/components/idf_test /opt/esp/idf/components/ieee802154 /opt/esp/idf/components/json /opt/esp/idf/components/log /usr/local/build/components/lora /usr/local/build/components/low_power_mode /opt/esp/idf/components/lwip /usr/local/build/main /opt/esp/idf/components/mbedtls /opt/esp/idf/components/mqtt /opt/esp/idf/components/newlib /opt/esp/idf/components/nvs_flash /opt/esp/idf/components/openthread /opt/esp/idf/components/partition_table /opt/esp/idf/components/perfmon /opt/esp/idf/components/protobuf-c /opt/esp/idf/examples/common_components/protocol_examples_common /opt/esp/idf/components/protocomm /opt/esp/idf/components/pthread /opt/esp/idf/components/sdmmc /opt/esp/idf/components/soc /opt/esp/idf/components/spi_flash /opt/esp/idf/components/spiffs /opt/esp/idf/components/tcp_transport /opt/esp/idf/components/ulp /opt/esp/idf/components/unity /opt/esp/idf/components/usb /opt/esp/idf/components/vfs /opt/esp/idf/components/wear_levelling /opt/esp/idf/components/wifi_provisioning /opt/esp/idf/components/wpa_supplicant /opt/esp/idf/components/xtensa
-- Configuring done
-- Generating done
-- Build files have been written to: /usr/local/build/build
Running ninja in directory /usr/local/build/build
Executing "ninja all"...
[K[K[K[KPartition table binary generated. Contents:
*******************************************************************************
# ESP-IDF Partition Table
# Name, Type, SubType, Offset, Size, Flags
nvs,data,nvs,0x9000,24K,
phy_init,data,phy,0xf000,4K,
factory,app,factory,0x10000,1M,
*******************************************************************************
[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K-- Found Git: /usr/bin/git (found version "2.25.1") 
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- The ASM compiler identification is GNU
-- Found assembler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc
-- Check for working C compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++
-- Check for working CXX compiler: /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /usr/local/build/sdkconfig
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of time_t
-- Check size of time_t - done
-- Adding linker script /opt/esp/idf/components/soc/esp32/ld/esp32.peripherals.ld
-- App "bootloader" version: v5.0
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /opt/esp/idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /opt/esp/idf/components/bootloader/subproject/main/ld/esp32/bootloader.ld
-- Adding linker script /opt/esp/idf/components/bootloader/subproject/main/ld/esp32/bootloader.rom.ld
-- Components: bootloader bootloader_support efuse esp_app_format esp_common esp_hw_support esp_rom esp_system esptool_py freertos hal log main micro-ecc newlib partition_table soc spi_flash xtensa
-- Component paths: /opt/esp/idf/components/bootloader /opt/esp/idf/components/bootloader_support /opt/esp/idf/components/efuse /opt/esp/idf/components/esp_app_format /opt/esp/idf/components/esp_common /opt/esp/idf/components/esp_hw_support /opt/esp/idf/components/esp_rom /opt/esp/idf/components/esp_system /opt/esp/idf/components/esptool_py /opt/esp/idf/components/freertos /opt/esp/idf/components/hal /opt/esp/idf/components/log /opt/esp/idf/components/bootloader/subproject/main /opt/esp/idf/components/bootloader/subproject/components/micro-ecc /opt/esp/idf/components/newlib /opt/esp/idf/components/partition_table /opt/esp/idf/components/soc /opt/esp/idf/components/spi_flash /opt/esp/idf/components/xtensa
-- Configuring done
-- Generating done
-- Build files have been written to: /usr/local/build/build/bootloader
[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kesptool.py v4.4
Creating esp32 image...
Merged 1 ELF section
Successfully created esp32 image.
Generated /usr/local/build/build/bootloader/bootloader.bin
[KBootloader binary size 0x6700 bytes. 0x900 bytes (8%) free.
[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K../components/bme280/include/bme280_lib_support.c: In function 'i2c_write':
../components/bme280/include/bme280_lib_support.c:334:12: warning: variable 'array' set but not used [-Wunused-but-set-variable]
  334 |         u8 array[I2C_BUFFER_LEN];
      |            ^~~~~
../components/bme280/include/bme280_lib_support.c: In function 'BME280_SPI_bus_write':
../components/bme280/include/bme280_lib_support.c:435:12: warning: variable 'array' set but not used [-Wunused-but-set-variable]
  435 |         u8 array[SPI_BUFFER_LEN * BME280_ADDRESS_INDEX];
      |            ^~~~~
[K[K../components/bme280/src/bme280.c: In function 'bme280_init_driver':
../components/bme280/src/bme280.c:145:23: warning: assignment to 'void (*)(u32)' {aka 'void (*)(unsigned int)'} from incompatible pointer type 'void (*)(uint32_t)' {aka 'void (*)(long unsigned int)'} [-Wincompatible-pointer-types]
  145 |     bme280.delay_msec = delay_ms;
      |                       ^
../components/bme280/src/bme280.c:146:22: warning: assignment to 's8 (*)(u8,  u8,  u8 *, u8)' {aka 'signed char (*)(unsigned char,  unsigned char,  unsigned char *, unsigned char)'} from incompatible pointer type 'esp_err_t (*)(uint8_t,  uint8_t,  uint8_t *, uint8_t)' {aka 'int (*)(unsigned char,  unsigned char,  unsigned char *, unsigned char)'} [-Wincompatible-pointer-types]
  146 |     bme280.bus_write = i2c_write;
      |                      ^
../components/bme280/src/bme280.c:147:21: warning: assignment to 's8 (*)(u8,  u8,  u8 *, u8)' {aka 'signed char (*)(unsigned char,  unsigned char,  unsigned char *, unsigned char)'} from incompatible pointer type 'esp_err_t (*)(uint8_t,  uint8_t,  uint8_t *, uint8_t)' {aka 'int (*)(unsigned char,  unsigned char,  unsigned char *, unsigned char)'} [-Wincompatible-pointer-types]
  147 |     bme280.bus_read = i2c_read;
      |                     ^
[K[31mFAILED: [0mesp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj 
ccache /opt/esp/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -DMBEDTLS_CONFIG_FILE=\"mbedtls/esp_config.h\" -DUNITY_INCLUDE_CONFIG_H -Iconfig -I../main -I/opt/esp/idf/components/newlib/platform_include -I/opt/esp/idf/components/freertos/FreeRTOS-Kernel/include -I/opt/esp/idf/components/freertos/esp_additions/include/freertos -I/opt/esp/idf/components/freertos/FreeRTOS-Kernel/portable/xtensa/include -I/opt/esp/idf/components/freertos/esp_additions/include -I/opt/esp/idf/components/esp_hw_support/include -I/opt/esp/idf/components/esp_hw_support/include/soc -I/opt/esp/idf/components/esp_hw_support/include/soc/esp32 -I/opt/esp/idf/components/esp_hw_support/port/esp32/. -I/opt/esp/idf/components/esp_hw_support/port/esp32/private_include -I/opt/esp/idf/components/heap/include -I/opt/esp/idf/components/log/include -I/opt/esp/idf/components/soc/include -I/opt/esp/idf/components/soc/esp32/. -I/opt/esp/idf/components/soc/esp32/include -I/opt/esp/idf/components/hal/esp32/include -I/opt/esp/idf/components/hal/include -I/opt/esp/idf/components/hal/platform_port/include -I/opt/esp/idf/components/esp_rom/include -I/opt/esp/idf/components/esp_rom/include/esp32 -I/opt/esp/idf/components/esp_rom/esp32 -I/opt/esp/idf/components/esp_common/include -I/opt/esp/idf/components/esp_system/include -I/opt/esp/idf/components/esp_system/port/soc -I/opt/esp/idf/components/esp_system/port/include/private -I/opt/esp/idf/components/xtensa/include -I/opt/esp/idf/components/xtensa/esp32/include -I/opt/esp/idf/components/lwip/include -I/opt/esp/idf/components/lwip/include/apps -I/opt/esp/idf/components/lwip/include/apps/sntp -I/opt/esp/idf/components/lwip/lwip/src/include -I/opt/esp/idf/components/lwip/port/esp32/include -I/opt/esp/idf/components/lwip/port/esp32/include/arch -I/opt/esp/idf/components/esp_ringbuf/include -I/opt/esp/idf/components/efuse/include -I/opt/esp/idf/components/efuse/esp32/include -I/opt/esp/idf/components/driver/include -I/opt/esp/idf/components/driver/deprecated -I/opt/esp/idf/components/driver/esp32/include -I/opt/esp/idf/components/esp_pm/include -I/opt/esp/idf/components/mbedtls/port/include -I/opt/esp/idf/components/mbedtls/mbedtls/include -I/opt/esp/idf/components/mbedtls/mbedtls/library -I/opt/esp/idf/components/mbedtls/esp_crt_bundle/include -I/opt/esp/idf/components/esp_app_format/include -I/opt/esp/idf/components/bootloader_support/include -I/opt/esp/idf/components/bootloader_support/bootloader_flash/include -I/opt/esp/idf/components/esp_partition/include -I/opt/esp/idf/components/app_update/include -I/opt/esp/idf/components/spi_flash/include -I/opt/esp/idf/components/pthread/include -I/opt/esp/idf/components/esp_timer/include -I/opt/esp/idf/components/app_trace/include -I/opt/esp/idf/components/esp_event/include -I/opt/esp/idf/components/nvs_flash/include -I/opt/esp/idf/components/esp_phy/include -I/opt/esp/idf/components/esp_phy/esp32/include -I/opt/esp/idf/components/vfs/include -I/opt/esp/idf/components/esp_netif/include -I/opt/esp/idf/components/wpa_supplicant/include -I/opt/esp/idf/components/wpa_supplicant/port/include -I/opt/esp/idf/components/wpa_supplicant/esp_supplicant/include -I/opt/esp/idf/components/esp_wifi/include -I/opt/esp/idf/components/unity/include -I/opt/esp/idf/components/unity/unity/src -I/opt/esp/idf/components/cmock/CMock/src -I/opt/esp/idf/components/console -I/opt/esp/idf/components/http_parser -I/opt/esp/idf/components/esp-tls -I/opt/esp/idf/components/esp-tls/esp-tls-crypto -I/opt/esp/idf/components/esp_adc/include -I/opt/esp/idf/components/esp_adc/interface -I/opt/esp/idf/components/esp_adc/esp32/include -I/opt/esp/idf/components/esp_adc/deprecated/include -I/opt/esp/idf/components/esp_eth/include -I/opt/esp/idf/components/esp_gdbstub/include -I/opt/esp/idf/components/esp_gdbstub/xtensa -I/opt/esp/idf/components/esp_gdbstub/esp32 -I/opt/esp/idf/components/esp_hid/include -I/opt/esp/idf/components/tcp_transport/include -I/opt/esp/idf/components/esp_http_client/include -I/opt/esp/idf/components/esp_http_server/include -I/opt/esp/idf/components/esp_https_ota/include -I/opt/esp/idf/components/esp_lcd/include -I/opt/esp/idf/components/esp_lcd/interface -I/opt/esp/idf/components/protobuf-c/protobuf-c -I/opt/esp/idf/components/protocomm/include/common -I/opt/esp/idf/components/protocomm/include/security -I/opt/esp/idf/components/protocomm/include/transports -I/opt/esp/idf/components/esp_local_ctrl/include -I/opt/esp/idf/components/esp_psram/include -I/opt/esp/idf/components/espcoredump/include -I/opt/esp/idf/components/espcoredump/include/port/xtensa -I/opt/esp/idf/components/wear_levelling/include -I/opt/esp/idf/components/sdmmc/include -I/opt/esp/idf/components/fatfs/diskio -I/opt/esp/idf/components/fatfs/vfs -I/opt/esp/idf/components/fatfs/src -I/opt/esp/idf/components/idf_test/include -I/opt/esp/idf/components/idf_test/include/esp32 -I/opt/esp/idf/components/ieee802154/include -I/opt/esp/idf/components/json/cJSON -I/opt/esp/idf/components/mqtt/esp-mqtt/include -I/opt/esp/idf/components/perfmon/include -I/opt/esp/idf/components/spiffs/include -I/opt/esp/idf/components/ulp/ulp_common/include -I/opt/esp/idf/components/ulp/ulp_common/include/esp32 -I/opt/esp/idf/components/wifi_provisioning/include -I../components/low_power_mode/src -I../components/bme280/src -I../components/bme280/include -I../components/lora/src -I../components/lora/include -I../components/lora/include/driver -I../components/lora/include/protocols/packet -I/opt/esp/idf/examples/common_components/protocol_examples_common/include -mlongcalls -Wno-frame-address    -ffunction-sections -fdata-sections -Wall -Werror=all -Wno-error=unused-function -Wno-error=unused-variable -Wno-error=deprecated-declarations -Wextra -Wno-unused-parameter -Wno-sign-compare -Wno-enum-conversion -gdwarf-4 -ggdb -Og -fmacro-prefix-map=/usr/local/build=. -fmacro-prefix-map=/opt/esp/idf=/IDF -fstrict-volatile-bitfields -Wno-error=unused-but-set-variable -fno-jump-tables -fno-tree-switch-conversion -DconfigENABLE_FREERTOS_DEBUG_OCDAWARE=1 -std=gnu17 -Wno-old-style-declaration -D_GNU_SOURCE -DIDF_VER=\"v5.0\" -DESP_PLATFORM -D_POSIX_READER_WRITER_LOCKS -MD -MT esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj -MF esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj.d -o esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj   -c ../main/main.c
../main/main.c: In function 'app_main':
../main/main.c:644:22: error: 'task_system' undeclared (first use in this function)
  644 |         xTaskCreate(&task_system, "SYSTEM", 1024 * 4, NULL, 5, NULL);
      |                      ^~~~~~~~~~~
../main/main.c:644:22: note: each undeclared identifier is reported only once for each function it appears in
../main/main.c: At top level:
../main/main.c:145:13: warning: 'task_radio_scheduler' declared 'static' but never defined [-Wunused-function]
  145 | static void task_radio_scheduler(void *pvParameters);
      |             ^~~~~~~~~~~~~~~~~~~~
../main/main.c:623:13: warning: 'sys_wr_ram_from_nvs' defined but not used [-Wunused-function]
  623 | static void sys_wr_ram_from_nvs(void)
      |             ^~~~~~~~~~~~~~~~~~~
../main/main.c:609:13: warning: 'sys_wr_nvs_from_ram' defined but not used [-Wunused-function]
  609 | static void sys_wr_nvs_from_ram(void)
      |             ^~~~~~~~~~~~~~~~~~~
../main/main.c:216:19: warning: 'schedule' defined but not used [-Wunused-variable]
  216 | static schedule_t schedule[SCHEDULE_SZ] =
      |                   ^~~~~~~~
../main/main.c:179:25: warning: 'buzzverse_link' defined but not used [-Wunused-variable]
  179 | static buzzverse_link_t buzzverse_link[MAX_DATA_TYPES] =
      |                         ^~~~~~~~~~~~~~
[K[K[K[K[K[K[K[K[Kninja: build stopped: subcommand failed.
ninja failed with exit code 1, output of the command is in the /usr/local/build/build/log/idf_py_stderr_output_457 and /usr/local/build/build/log/idf_py_stdout_output_457
Build failed. Check logs for more details.
Build succeeded!
Copying build artifacts from container to /home/bartek/workspace/lora_esp32_firmware_ci/artifacts...
Stopping and removing the Docker container...
 Container esp32_builder  Stopping
 Container esp32_builder  Stopped
 Container esp32_builder  Removing
 Container esp32_builder  Removed
 Network lora_esp32_firmware_ci_default  Removing
 Network lora_esp32_firmware_ci_default  Removed
Returning to the original directory: /home/bartek/workspace/lora_esp32_firmware
